# {{.GeneratedMsg}}

type Mutation {
    """Submit adds new records and tries to match them with existing entities.

Records that were submitted together are assumed to match with each other, even
if they do not have anything in common. If this is not your intended behaviour
please send multiple requests or make multiple calls to submit using GraphQL
aliases."""
    submit(input: SubmitInput!): SubmitOutput! @hasPrivilege(privilege: "tilores/mutation.submit")

    """SubmitWithPreview adds new records and tries to match them with existing
entities and returns a preview of how entities would potentially look like
when/if records are ingested.

Records that were submitted together are assumed to match with each other, even
if they do not have anything in common. If this is not your intended behaviour
please send multiple requests or make multiple calls to submit using GraphQL
aliases."""
    submitWithPreview(input: SubmitWithPreviewInput!): SubmitWithPreviewOutput! @hasPrivilege(privilege: "tilores/mutation.submit")

    """Disassemble removes one or more edges or even records.

Will return amount of effected records and edges, as well as the resulting
entity ids, if any."""
    disassemble(input: DisassembleInput!): DisassembleOutput! @hasPrivilege(privilege: "tilores/mutation.disassemble")

    """RemoveConnectionBan removes a connection ban between entities."""
    removeConnectionBan(input: RemoveConnectionBanInput!): RemoveConnectionBanOutput! @hasPrivilege(privilege: "tilores/mutation.removeConnectionBan")
}

"""SubmitInput the data input to be submitted."""
input SubmitInput {
    records: [RecordInput!]!
}

"""SubmitWithPreviewInput the data input to be submitted.

DryRun: an option to get the entities preview as if the provided records were
ingested without actually ingesting them"""
input SubmitWithPreviewInput {
    records: [RecordInput!]!
    dryRun: Boolean
}

"""DisassembleInput information used for disassemble."""
input DisassembleInput @goModel(model: "github.com/tilotech/tilores-plugin-api/dispatcher.DisassembleInput") {
    edges: [DisassembleEdgeInput!]
    recordIDs: [ID!]
    createConnectionBan: Boolean
    meta: DisassembleMeta
}

"""RemoveConnectionBanInput information used for removing a connection ban."""
input RemoveConnectionBanInput @goModel(model: "github.com/tilotech/tilores-plugin-api/dispatcher.RemoveConnectionBanInput") {
    reference: ID!
    entityID: ID!
    others: [ID!]!
    meta: ConnectionBanMetaInput!
}

"""DisassembleMeta provides information who and why disassemble was started."""
input DisassembleMeta @goModel(model: "github.com/tilotech/tilores-plugin-api/dispatcher.DisassembleMeta") {
    user: String!
    reason: String!
}

"""DisassembleEdge represents a single edge to be removed."""
input DisassembleEdgeInput @goModel(model: "github.com/tilotech/tilores-plugin-api/dispatcher.DisassembleEdge") {
    a: ID!
    b: ID!
}

"""ConnectionBanMeta provides information who removed a connection ban and why."""
input ConnectionBanMetaInput @goModel(model: "github.com/tilotech/tilores-plugin-api/dispatcher.RemoveConnectionBanMeta") {
    user: String!
    reason: String!
}

"""SubmitOutput provides additional information about a successful data submission."""
type SubmitOutput @goModel(model: "github.com/tilotech/tilores-plugin-api/dispatcher.SubmitOutput") {
    """RecordsAdded returns the amount of records that were provided in the submit request."""
    recordsAdded: Int!
}

"""SubmitWithPreviewOutput provides a preview of how the entities could potentially look like if/when ingested."""
type SubmitWithPreviewOutput {
    entities: [Entity!]!
}

"""DisassembleOutput informs about whether the disassemble was triggered or not."""
type DisassembleOutput @goModel(model: "github.com/tilotech/tilores-plugin-api/dispatcher.DisassembleOutput") {
    triggered: Boolean!
}

"""RemoveConnectionBanOutput provides information regarding the connection ban removal."""
type RemoveConnectionBanOutput{
    removed: Boolean!
}
