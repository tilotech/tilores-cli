package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"
	"{{.ModulePath}}/graph/generated"
	"{{.ModulePath}}/graph/model"
	"time"
)

// RecordInsights is the resolver for the recordInsights field.
func (r *entityResolver) RecordInsights(ctx context.Context, obj *model.Entity) (*model.RecordInsights, error) {
	return &model.RecordInsights{
    APIRecords: obj.APIRecords,
  }, nil
}

// Records is the resolver for the records field.
func (r *recordInsightsResolver) Records(ctx context.Context, obj *model.RecordInsights) ([]*model.Record, error) {
	panic(fmt.Errorf("not implemented: Records - records"))
}

// Filter is the resolver for the filter field.
func (r *recordInsightsResolver) Filter(ctx context.Context, obj *model.RecordInsights, conditions []*model.FilterCondition) (*model.RecordInsights, error) {
	panic(fmt.Errorf("not implemented: Filter - filter"))
}

// Sort is the resolver for the sort field.
func (r *recordInsightsResolver) Sort(ctx context.Context, obj *model.RecordInsights, criteria []*model.SortCriteria) (*model.RecordInsights, error) {
	panic(fmt.Errorf("not implemented: Sort - sort"))
}

// Group is the resolver for the group field.
func (r *recordInsightsResolver) Group(ctx context.Context, obj *model.RecordInsights, fields []string) ([]*model.RecordInsights, error) {
	panic(fmt.Errorf("not implemented: Group - group"))
}

// Limit is the resolver for the limit field.
func (r *recordInsightsResolver) Limit(ctx context.Context, obj *model.RecordInsights, count int, offset *int) (*model.RecordInsights, error) {
	panic(fmt.Errorf("not implemented: Limit - limit"))
}

// Count is the resolver for the count field.
func (r *recordInsightsResolver) Count(ctx context.Context, obj *model.RecordInsights) (int, error) {
	panic(fmt.Errorf("not implemented: Count - count"))
}

// CountDistinct is the resolver for the countDistinct field.
func (r *recordInsightsResolver) CountDistinct(ctx context.Context, obj *model.RecordInsights, fields []string) (int, error) {
	panic(fmt.Errorf("not implemented: CountDistinct - countDistinct"))
}

// First is the resolver for the first field.
func (r *recordInsightsResolver) First(ctx context.Context, obj *model.RecordInsights) (*model.Record, error) {
	panic(fmt.Errorf("not implemented: First - first"))
}

// Last is the resolver for the last field.
func (r *recordInsightsResolver) Last(ctx context.Context, obj *model.RecordInsights) (*model.Record, error) {
	panic(fmt.Errorf("not implemented: Last - last"))
}

// Values is the resolver for the values field.
func (r *recordInsightsResolver) Values(ctx context.Context, obj *model.RecordInsights, field string, distinct *bool, includeNull *bool) ([]interface{}, error) {
	panic(fmt.Errorf("not implemented: Values - values"))
}

// FrequencyDistribution is the resolver for the frequencyDistribution field.
func (r *recordInsightsResolver) FrequencyDistribution(ctx context.Context, obj *model.RecordInsights, field string, top *int, direction *model.SortDirection) ([]*model.FrequencyDistributionEntry, error) {
	panic(fmt.Errorf("not implemented: FrequencyDistribution - frequencyDistribution"))
}

// Average is the resolver for the average field.
func (r *recordInsightsResolver) Average(ctx context.Context, obj *model.RecordInsights, field string) (float64, error) {
	panic(fmt.Errorf("not implemented: Average - average"))
}

// Max is the resolver for the max field.
func (r *recordInsightsResolver) Max(ctx context.Context, obj *model.RecordInsights, field string) (float64, error) {
	panic(fmt.Errorf("not implemented: Max - max"))
}

// Median is the resolver for the median field.
func (r *recordInsightsResolver) Median(ctx context.Context, obj *model.RecordInsights, field string) (float64, error) {
	panic(fmt.Errorf("not implemented: Median - median"))
}

// Min is the resolver for the min field.
func (r *recordInsightsResolver) Min(ctx context.Context, obj *model.RecordInsights, field string) (float64, error) {
	panic(fmt.Errorf("not implemented: Min - min"))
}

// Sum is the resolver for the sum field.
func (r *recordInsightsResolver) Sum(ctx context.Context, obj *model.RecordInsights, field string) (float64, error) {
	panic(fmt.Errorf("not implemented: Sum - sum"))
}

// Newest is the resolver for the newest field.
func (r *recordInsightsResolver) Newest(ctx context.Context, obj *model.RecordInsights, field string) (*model.Record, error) {
	panic(fmt.Errorf("not implemented: Newest - newest"))
}

// Oldest is the resolver for the oldest field.
func (r *recordInsightsResolver) Oldest(ctx context.Context, obj *model.RecordInsights, field string) (*model.Record, error) {
	panic(fmt.Errorf("not implemented: Oldest - oldest"))
}

// Before is the resolver for the before field.
func (r *recordInsightsResolver) Before(ctx context.Context, obj *model.RecordInsights, field string, timestamp time.Time) (*model.RecordInsights, error) {
	panic(fmt.Errorf("not implemented: Before - before"))
}

// At is the resolver for the at field.
func (r *recordInsightsResolver) At(ctx context.Context, obj *model.RecordInsights, field string, timestamp time.Time) (*model.RecordInsights, error) {
	panic(fmt.Errorf("not implemented: At - at"))
}

// After is the resolver for the after field.
func (r *recordInsightsResolver) After(ctx context.Context, obj *model.RecordInsights, field string, timestamp time.Time) (*model.RecordInsights, error) {
	panic(fmt.Errorf("not implemented: After - after"))
}

// RecordInsights returns generated.RecordInsightsResolver implementation.
func (r *Resolver) RecordInsights() generated.RecordInsightsResolver {
	return &recordInsightsResolver{r}
}

type recordInsightsResolver struct{ *Resolver }
