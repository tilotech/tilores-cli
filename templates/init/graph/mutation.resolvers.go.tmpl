package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"{{.ModulePath}}/graph/generated"
	"{{.ModulePath}}/graph/model"

	"github.com/tilotech/tilores-plugin-api"
	"github.com/tilotech/tilores-plugin-api/dispatcher"
)

// Submit submits records into data stream for assembly, which will lead to updating or creating entities
func (r *mutationResolver) Submit(ctx context.Context, input model.SubmitInput) (*dispatcher.SubmitOutput, error) {
	submissionRecords := make([]*api.Record, len(input.Records))
	for i, record := range input.Records {
		j, err := json.Marshal(record)
		if err != nil {
			return nil, err
		}
		var data map[string]interface{}
		err = json.Unmarshal(j, &data)
		if err != nil {
			return nil, err
		}
		recordID := extractRecordID(record)
		if strings.Contains(recordID, ":") {
			return nil, fmt.Errorf("the record ID must not contain a colon, record id was: %v", recordID)
		}
		submissionRecords[i] = &api.Record{
			ID:   recordID,
			Data: data,
		}
	}
	return r.Dispatcher.Submit(ctx, &dispatcher.SubmitInput{Records: submissionRecords})
}

// Disassemble triggers a disassemble to remove one or more edges or even records
func (r *mutationResolver) Disassemble(ctx context.Context, input dispatcher.DisassembleInput) (*dispatcher.DisassembleOutput, error) {
	timeout := 5 * time.Second
	input.Timeout = &timeout
	return r.Dispatcher.Disassemble(ctx, &input)
}

// RemoveConnectionBan removes a connection ban between entities.
func (r *mutationResolver) RemoveConnectionBan(ctx context.Context, input dispatcher.RemoveConnectionBanInput) (*model.RemoveConnectionBanOutput, error) {
	err := r.Dispatcher.RemoveConnectionBan(ctx, &input)
	return &model.RemoveConnectionBanOutput{Removed: err == nil}, err
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
