package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"{{.ModulePath}}/graph/generated"
	"{{.ModulePath}}/graph/model"

	insights "github.com/tilotech/tilores-insights/edge"
)

// Count is the resolver for the count field.
func (r *edgeInsightsResolver) Count(ctx context.Context, obj *model.EdgeInsights) (int, error) {
	return insights.Count(obj.APIEdges), nil
}

// FrequencyDistribution is the resolver for the frequencyDistribution field.
func (r *edgeInsightsResolver) FrequencyDistribution(ctx context.Context, obj *model.EdgeInsights, top *int, direction *model.SortDirection) ([]*model.FrequencyDistributionEntry, error) {
	sortASC := direction == nil || *direction == model.SortDirectionAsc
	result := insights.FrequencyDistribution(
		obj.APIEdges,
		withDefault(top, -1),
		sortASC,
	)
	entries := make([]*model.FrequencyDistributionEntry, len(result))
	for i, r := range result {
		entries[i] = &model.FrequencyDistributionEntry{
			Value:      r.RuleID,
			Frequency:  r.Frequency,
			Percentage: r.Percentage,
		}
	}
	return entries, nil
}

// Matrix is the resolver for the matrix field.
func (r *edgeInsightsResolver) Matrix(ctx context.Context, obj *model.EdgeInsights, links []string) ([]*model.EdgeMatrixEntry, error) {
	result := insights.Matrix(
		obj.APIEdges,
		obj.APIDuplicates,
		links,
	)
	entries := make([]*model.EdgeMatrixEntry, len(result))
	for i, r := range result {
		l := make(map[string]any, len(r.Links))
		for k, v := range r.Links {
			l[k] = v
		}
		entries[i] = &model.EdgeMatrixEntry{
			A:     r.A,
			B:     r.B,
			Links: l,
		}
	}
	return entries, nil
}

// EdgeInsights is the resolver for the edgeInsights field.
func (r *entityResolver) EdgeInsights(ctx context.Context, obj *model.Entity) (*model.EdgeInsights, error) {
	return &model.EdgeInsights{
		APIEdges:      obj.Edges,
		APIDuplicates: obj.Duplicates,
	}, nil
}

// EdgeInsights returns generated.EdgeInsightsResolver implementation.
func (r *Resolver) EdgeInsights() generated.EdgeInsightsResolver { return &edgeInsightsResolver{r} }

type edgeInsightsResolver struct{ *Resolver }
