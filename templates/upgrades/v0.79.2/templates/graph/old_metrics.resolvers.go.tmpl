package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"fmt"
	"{{.ModulePath}}/graph/generated"
	"{{.ModulePath}}/graph/model"
	"os"
	"strconv"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/config"
	"github.com/aws/aws-sdk-go-v2/service/cloudwatch"
	cwTypes "github.com/aws/aws-sdk-go-v2/service/cloudwatch/types"
	"github.com/aws/aws-sdk-go-v2/service/sqs"
	sqsTypes "github.com/aws/aws-sdk-go-v2/service/sqs/types"
)

// AssemblyStatus is the resolver for the assemblyStatus field.
func (r *metricsResolver) AssemblyStatus(ctx context.Context, obj *model.Metrics) (*model.AssemblyStatus, error) {
	queueName := os.Getenv("RAW_DATA_SQS")
	queueURL := os.Getenv("RAW_DATA_SQS_URL")

	if queueName == "" || queueURL == "" {
		return nil, fmt.Errorf("this feature is only available when using SQS as a raw data queue")
	}

	cfg, err := config.LoadDefaultConfig(ctx)
	if err != nil {
		return nil, err
	}

	sqsClient := sqs.NewFromConfig(cfg)
	cwClient := cloudwatch.NewFromConfig(cfg)

	sqsOut, err := sqsClient.GetQueueAttributes(ctx, &sqs.GetQueueAttributesInput{
		QueueUrl: aws.String(queueURL),
		AttributeNames: []sqsTypes.QueueAttributeName{
			sqsTypes.QueueAttributeNameApproximateNumberOfMessages,
			sqsTypes.QueueAttributeNameApproximateNumberOfMessagesNotVisible,
		},
	})
	if err != nil {
		return nil, err
	}

	msgCountStr := sqsOut.Attributes[string(sqsTypes.QueueAttributeNameApproximateNumberOfMessages)]
	msgCount, err := strconv.Atoi(msgCountStr)
	if err != nil {
		return nil, err
	}

	msgNotVisible := 0
	msgNotVisibleStr := sqsOut.Attributes[string(sqsTypes.QueueAttributeNameApproximateNumberOfMessagesNotVisible)]
	if msgNotVisibleStr != "" {
		msgNotVisible, _ = strconv.Atoi(msgNotVisibleStr)
	}
	totalMsgCount := msgCount + msgNotVisible

	state := model.AssemblyStateInProgress
	if totalMsgCount == 0 {
		state = model.AssemblyStateReady
		return &model.AssemblyStatus{
			State:                  state,
			EstimatedTimeRemaining: nil,
		}, nil
	}

	// For 09:16 the start is 09:10 and end is 09:15
	end := time.Now().Truncate(5 * time.Minute)
	start := end.Add(-5 * time.Minute)

	cwOut, err := cwClient.GetMetricStatistics(ctx, &cloudwatch.GetMetricStatisticsInput{
		Namespace:  aws.String("AWS/SQS"),
		MetricName: aws.String("NumberOfMessagesDeleted"),
		Dimensions: []cwTypes.Dimension{
			{
				Name:  aws.String("QueueName"),
				Value: aws.String(queueName),
			},
		},
		StartTime: aws.Time(start),
		EndTime:   aws.Time(end),
		Period:    aws.Int32(300), // 5 mins
		Statistics: []cwTypes.Statistic{
			cwTypes.StatisticSum,
		},
	})
	if err != nil {
		return nil, err
	}

	if len(cwOut.Datapoints) == 0 {
		return &model.AssemblyStatus{
			State: state,
		}, nil
	}
	var messagesPerMinute float64
	for _, dp := range cwOut.Datapoints {
		if dp.Sum != nil {
			messagesPerMinute = *dp.Sum / 5
		}
	}
	estimated := 0
	if messagesPerMinute > 0 {
		estimated = max(int(float64(totalMsgCount)/messagesPerMinute), 1)
		return &model.AssemblyStatus{
			State:                  state,
			EstimatedTimeRemaining: &estimated,
		}, nil
	}

	return &model.AssemblyStatus{
		State: state,
	}, nil
}

// Metrics returns generated.MetricsResolver implementation.
func (r *Resolver) Metrics() generated.MetricsResolver { return &metricsResolver{r} }

type metricsResolver struct{ *Resolver }
