package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"{{.ModulePath}}/graph/generated"
	"{{.ModulePath}}/graph/model"

	insights "github.com/tilotech/tilores-insights/record"
)

// RecordInsights is the resolver for the recordInsights field.
func (r *entityResolver) RecordInsights(ctx context.Context, obj *model.Entity) (*model.RecordInsights, error) {
	return &model.RecordInsights{
    APIRecords: obj.APIRecords,
  }, nil
}

// Records is the resolver for the records field.
func (r *recordInsightsResolver) Records(ctx context.Context, obj *model.RecordInsights) ([]*model.Record, error) {
	return mapToCustomerRecordList(obj.APIRecords)
}

// Filter is the resolver for the filter field.
func (r *recordInsightsResolver) Filter(ctx context.Context, obj *model.RecordInsights, conditions []*model.FilterCondition) (*model.RecordInsights, error) {
	cc := make([]*insights.FilterCondition, len(conditions))
	for i, c := range cc {
		cc[i] = &insights.FilterCondition{
			Path:          c.Path,
			Equal:         c.Equal,
			IsNull:        c.IsNull,
			StartsWith:    c.StartsWith,
			EndsWith:      c.EndsWith,
			LikeRegex:     c.LikeRegex,
			LessThan:      c.LessThan,
			LessEqual:     c.LessEqual,
			GreaterThan:   c.GreaterThan,
			GreaterEqual:  c.GreaterEqual,
			After:         c.After,
			Since:         c.Since,
			Before:        c.Before,
			Until:         c.Until,
			Invert:        c.Invert,
			CaseSensitive: c.CaseSensitive,
		}
	}
	filteredRecords, err := insights.Filter(obj.APIRecords, cc)
	if err != nil {
		return nil, err
	}
	return &model.RecordInsights{
		APIRecords: filteredRecords,
	}, nil
}

// Sort is the resolver for the sort field.
func (r *recordInsightsResolver) Sort(ctx context.Context, obj *model.RecordInsights, criteria []*model.SortCriteria) (*model.RecordInsights, error) {
	cc := make([]*insights.SortCriteria, len(criteria))
	for i, c := range criteria {
		sortASC := c.Direction == nil || *c.Direction == model.SortDirectionAsc
		cc[i] = &insights.SortCriteria{
			Path: c.Field,
			ASC:  sortASC,
		}
	}
	records, err := insights.Sort(obj.APIRecords, cc)
	if err != nil {
		return nil, err
	}
	return &model.RecordInsights{
		APIRecords: records,
	}, nil
}

// Group is the resolver for the group field.
func (r *recordInsightsResolver) Group(ctx context.Context, obj *model.RecordInsights, fields []string, caseSensitive *bool) ([]*model.RecordInsights, error) {
	groups, err := insights.Group(
		obj.APIRecords,
		fields,
		withDefault(caseSensitive, false),
	)
	if err != nil {
		return nil, err
	}
	insightGroups := make([]*model.RecordInsights, len(groups))
	for i := range groups {
		insightGroups[i] = &model.RecordInsights{
			APIRecords: groups[i],
		}
	}
	return insightGroups, nil
}

// Limit is the resolver for the limit field.
func (r *recordInsightsResolver) Limit(ctx context.Context, obj *model.RecordInsights, count int, offset *int) (*model.RecordInsights, error) {
	records := insights.Limit(
		obj.APIRecords,
		count,
		withDefault(offset, 0),
	)
	return &model.RecordInsights{
		APIRecords: records,
	}, nil
}

// Count is the resolver for the count field.
func (r *recordInsightsResolver) Count(ctx context.Context, obj *model.RecordInsights) (int, error) {
	return insights.Count(obj.APIRecords), nil
}

// CountDistinct is the resolver for the countDistinct field.
func (r *recordInsightsResolver) CountDistinct(ctx context.Context, obj *model.RecordInsights, fields []string, caseSensitive *bool) (int, error) {
	return insights.CountDistinct(
		obj.APIRecords,
		fields,
		withDefault(caseSensitive, false),
	)
}

// First is the resolver for the first field.
func (r *recordInsightsResolver) First(ctx context.Context, obj *model.RecordInsights) (*model.Record, error) {
	return mapToCustomerRecord(insights.First(obj.APIRecords))
}

// Last is the resolver for the last field.
func (r *recordInsightsResolver) Last(ctx context.Context, obj *model.RecordInsights) (*model.Record, error) {
	return mapToCustomerRecord(insights.Last(obj.APIRecords))
}

// Values is the resolver for the values field.
func (r *recordInsightsResolver) Values(ctx context.Context, obj *model.RecordInsights, field string) ([]interface{}, error) {
	return insights.Values(obj.APIRecords, field), nil
}

// ValuesDistinct is the resolver for the valuesDistinct field.
func (r *recordInsightsResolver) ValuesDistinct(ctx context.Context, obj *model.RecordInsights, field string, caseSensitive *bool) ([]interface{}, error) {
	return insights.ValuesDistinct(
		obj.APIRecords,
		field,
		withDefault(caseSensitive, false),
	)
}

// FrequencyDistribution is the resolver for the frequencyDistribution field.
func (r *recordInsightsResolver) FrequencyDistribution(ctx context.Context, obj *model.RecordInsights, field string, top *int, direction *model.SortDirection) ([]*model.FrequencyDistributionEntry, error) {
	sortASC := direction == nil || *direction == model.SortDirectionAsc
	result, err := insights.FrequencyDistribution(
		obj.APIRecords,
		field,
		withDefault(caseSensitive, false),
		withDefault(top, -1),
		sortASC,
	)
	if err != nil {
		return nil, err
	}
	entries := make([]*model.FrequencyDistributionEntry, len(result))
	for i, r := range result {
		entries[i] = &model.FrequencyDistributionEntry{
			Value:      r.Value,
			Frequency:  r.Frequency,
			Percentage: r.Percentage,
		}
	}
	return entries, nil
}

// Average is the resolver for the average field.
func (r *recordInsightsResolver) Average(ctx context.Context, obj *model.RecordInsights, field string) (*float64, error) {
	return insights.Average(obj.APIRecords, field)
}

// Max is the resolver for the max field.
func (r *recordInsightsResolver) Max(ctx context.Context, obj *model.RecordInsights, field string) (*float64, error) {
	return insights.Max(obj.APIRecords, field)
}

// Median is the resolver for the median field.
func (r *recordInsightsResolver) Median(ctx context.Context, obj *model.RecordInsights, field string) (*float64, error) {
	return insights.Median(obj.APIRecords, field)
}

// Min is the resolver for the min field.
func (r *recordInsightsResolver) Min(ctx context.Context, obj *model.RecordInsights, field string) (*float64, error) {
	return insights.Min(obj.APIRecords, field)
}

// Sum is the resolver for the sum field.
func (r *recordInsightsResolver) Sum(ctx context.Context, obj *model.RecordInsights, field string) (*float64, error) {
	return insights.Sum(obj.APIRecords, field)
}

// StandardDeviation is the resolver for the standardDeviation field.
func (r *recordInsightsResolver) StandardDeviation(ctx context.Context, obj *model.RecordInsights, field string) (*float64, error) {
	return insights.StandardDeviation(obj.APIRecords, field)
}

// Confidence is the resolver for the confidence field.
func (r *recordInsightsResolver) Confidence(ctx context.Context, obj *model.RecordInsights, field string, caseSensitive *bool) (*float64, error) {
	return insights.Confidence(
		obj.APIRecords,
		field,
		withDefault(caseSensitive, false),
	)
}

// Newest is the resolver for the newest field.
func (r *recordInsightsResolver) Newest(ctx context.Context, obj *model.RecordInsights, field string) (*model.Record, error) {
	record, err := insights.Newest(obj.APIRecords, field)
	if err != nil {
		return nil, err
	}
	return mapToCustomerRecord(record)
}

// Oldest is the resolver for the oldest field.
func (r *recordInsightsResolver) Oldest(ctx context.Context, obj *model.RecordInsights, field string) (*model.Record, error) {
	record, err := insights.Oldest(obj.APIRecords, field)
	if err != nil {
		return nil, err
	}
	return mapToCustomerRecord(record)
}

// Flatten is the resolver for the flatten field.
func (r *recordInsightsResolver) Flatten(ctx context.Context, obj *model.RecordInsights, field string) ([]interface{}, error) {
	return insights.Flatten(obj.APIRecords, field)
}

// FlattenDistinct is the resolver for the flattenDistinct field.
func (r *recordInsightsResolver) FlattenDistinct(ctx context.Context, obj *model.RecordInsights, field string, caseSensitive *bool) ([]interface{}, error) {
	return insights.FlattenDistinct(
		obj.APIRecords,
		field,
		withDefault(caseSensitive, false),
	)
}

// RecordInsights returns generated.RecordInsightsResolver implementation.
func (r *Resolver) RecordInsights() generated.RecordInsightsResolver {
	return &recordInsightsResolver{r}
}

type recordInsightsResolver struct{ *Resolver }
