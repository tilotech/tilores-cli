package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.

import (
	"context"

	"github.com/tilotech/tilores-plugin-api/dispatcher"
	"{{.ModulePath}}/graph/generated"
	"{{.ModulePath}}/graph/model"
)

// Submit submits records into data stream for assembly, which will lead to updating or creating entities
func (r *mutationResolver) Submit(ctx context.Context, input model.SubmitInput) (*dispatcher.SubmitOutput, error) {
	submissionRecords, err := prepareForSubmission(input.Records)
	if err != nil {
		return nil, err
	}
	return r.Dispatcher.Submit(ctx, &dispatcher.SubmitInput{Records: submissionRecords})
}

// SubmitWithPreview submits records into data stream for assembly, and returns a preview of how the entities would look like when/if records are assembled.
func (r *mutationResolver) SubmitWithPreview(ctx context.Context, input model.SubmitWithPreviewInput) (*model.SubmitWithPreviewOutput, error) {
	submissionRecords, err := prepareForSubmission(input.Records)
	if err != nil {
		return nil, err
	}
	submitWithPreviewOutput, err := r.Dispatcher.SubmitWithPreview(ctx, &dispatcher.SubmitWithPreviewInput{Records: submissionRecords, DryRun: input.DryRun})
	if err != nil {
		return nil, err
	}
	customerEntities := make([]*model.Entity, 0, len(submitWithPreviewOutput.Entities))
	for _, entity := range submitWithPreviewOutput.Entities {
		customerEntity, err := mapToCustomerEntity(entity)
		if err != nil {
			return nil, err
		}
		customerEntities = append(customerEntities, customerEntity)
	}

	return &model.SubmitWithPreviewOutput{
		Entities: customerEntities,
	}, nil
}

// Disassemble triggers a disassemble to remove one or more edges or even records
func (r *mutationResolver) Disassemble(ctx context.Context, input dispatcher.DisassembleInput) (*dispatcher.DisassembleOutput, error) {
	return r.Dispatcher.Disassemble(ctx, &input)
}

// RemoveConnectionBan removes a connection ban between entities.
func (r *mutationResolver) RemoveConnectionBan(ctx context.Context, input dispatcher.RemoveConnectionBanInput) (*model.RemoveConnectionBanOutput, error) {
	err := r.Dispatcher.RemoveConnectionBan(ctx, &input)
	return &model.RemoveConnectionBanOutput{Removed: err == nil}, err
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
